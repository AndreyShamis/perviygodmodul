/*
 * EX5C    ::
 * =============================================================
 * Writen by: Andrey Shamis, id: 321470882, login:andreysh
 */

//--------------- including section -------------
#include <iostream>

//--------------- using section        -------------
using std::cout;
using std::cin;
using std::endl;


//--------------- main                 -------------
int main()
{
    const int MAX_ROWS = 10;    // Max array rows
    const int MAX_COLS = 20;    // Max array cols

    bool yaalom = false;        //

    int matrix[MAX_ROWS][MAX_COLS], // array
        row, cols,  // parameters matrix, geted from user
        i,j,
        x,y,
        rift, //threshold,gives the length of negative steps in the staircase
        diameter,   // diameter (size) of diamond
        sidel,      // length of any side diamond center
        up_row, // used to minimize the counting of the upper element in array
        left_col;//used to minimize the counting of the left element in array

    cin >> row >> cols; // getting param for matrix

    /*
    int max_avail=0;
    // Looking for max len can be count
    max_avail = (row<cols)? row:cols; // taken from inters
    max_avail = (max_avail%2)? max_avail:max_avail-1; // putting to izugi
    //cout << max_avail << "\n";
    */
    for(i=0;i<row;i++)
        for(j=0;j<cols;j++)
            cin >> matrix[i][j];    // putting value into matrix elements


    for(i=0;i<row-2;i++)
        for(j=1;j<cols-1;j++)
            if( matrix[i][j] != matrix[i][j+1] &&   // This condition must
                matrix[i][j] != matrix[i][j-1] &&   // always occur for each
                matrix[i][j] == matrix[i+1][j] &&   // diamond, not dependent
                matrix[i][j] == matrix[i+1][j-1] && // on its length
                matrix[i][j] == matrix[i+1][j+1] &&
                matrix[i][j] == matrix[i+2][j])
            {

                diameter=3; // length of which we have already found
                // find the length of the workpiece diamond from 3 (we have)
                for(x=i+2;x<row-1;x+=2)
                    if(matrix[i][j] == matrix[x][j]
                    && matrix[i][j] == matrix[x+1][j])
                        diameter+=2;    // add 2 to the length
                    else
                        break;          // ended length, we suppress the cycle

                sidel = ((diameter+1)/2); // length of any side diamond center
                // validation of latitude, so as not to go beyond the field
                if(1+j-sidel>=0)
                {
                    yaalom=true;
                    // Forget the fact that we are looking      //13 13 13 #
                    // for a diamond! To begin with "bends"     //13 13 !
                    // our diamond in two, and get the step     //13 !
                    // ladder, and check it by the same laws    //#
                    // with the "step" in the two sides.
                    // 13 - our diamond :
                    // # - vertical, horizontal edge of total 4
                    // ! - edge of the stairs (only 4 in diamond)

                    rift=0;
                    for(x=i+sidel-1;x<2*sidel+i-1;x++)
                    {
                        if(x==i+sidel-1)
                        {
                            if(x-sidel>=0)
                                if(matrix[i][j]==matrix[x-sidel][j])
                                {
                                    yaalom = false;//cout << "Konec laja up" << endl;
                                    break;
                                }


                            if(x+sidel<row)
                                if(matrix[i][j]==matrix[x+sidel][j])
                                {
                                    yaalom = false;//cout << "Konec laja down " << matrix[x+sidel][j] << endl;
                                    break;
                                }
                        }
                          //cout << " x:" << x << " ";
                        for(y=j;y<j+sidel-rift ;y++)
                        {
                            up_row  = x-2*rift;
                            left_col= 2*j-y;
                            if(y==j)// proverka kace
                            {
                                if(j-sidel>=0)
                                    if(matrix[i][j]==matrix[x][j-sidel])
                                    {
                                        yaalom = false;//cout << "Konec laja left" << endl;
                                        //break;
                                    }

                                if(j+sidel<cols)
                                    if(matrix[i][j]==matrix[x][j+sidel])
                                    {
                                        yaalom = false;//cout << "Konec laja right" << endl;
                                        //break;
                                    }
                            }
                            else if(y==j+sidel-rift-1) //proverka na stupenkax X
                                if(matrix[i][j]==matrix[x][y+1] || matrix[i][j]==matrix[x][left_col-1]
                                || matrix[i][j]==matrix[up_row][y+1] || matrix[i][j]==matrix[up_row][left_col-1])
                                {
                                    yaalom = false;
                                    //break;
                                }

                            // proverka kubikov
                            if(matrix[i][j]!=matrix[x][y] || matrix[i][j]!=matrix[x][left_col]
                            || matrix[i][j]!=matrix[up_row][y] || matrix[i][j]!=matrix[up_row][left_col])
                            {
                                yaalom = false; //cout << "\n UPS:" << matrix[x][y] << "\n";
                                //break;
                            }
                        }
                        rift++; // add the negative step
                    }

                    if(yaalom)
                        cout << i << " " << j << " " << diameter  <<  "\n";
                }
            }
    return(0);
}

